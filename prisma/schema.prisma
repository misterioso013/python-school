generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String?
  imageUrl  String?

  // Stats
  studyTime        Int @default(0) // em minutos
  lessonsCompleted Int @default(0)
  achievements     Int @default(0)
  dailyGoals       Int @default(0)

  // Relações
  progress          Progress[]
  notes             Note[]
  activities        Activity[]
  certificates      Certificate[]
  moduleCompletions ModuleCompletion[]
}

model Progress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  moduleId  String
  lessonId  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  Lesson Lesson @relation(fields: [lessonId], references: [id])

  @@index([userId, moduleId])
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  moduleId  String
  lessonId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  Lesson Lesson @relation(fields: [lessonId], references: [id])
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String // "lesson_completed", "achievement_earned", etc
  detail    String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model ModuleCompletion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  moduleId    String
  completedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  certificate Certificate?

  @@unique([userId, moduleId])
}

model Certificate {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  moduleId          String
  issuedAt          DateTime @default(now())
  certificateNumber String   @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  moduleCompletion   ModuleCompletion @relation(fields: [moduleCompletionId], references: [id])
  moduleCompletionId String           @unique @db.ObjectId
}

model Lesson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  moduleId  String
  slug      String // ex: 'variables', 'data-types'
  title     String
  content   String
  order     Int // Para ordenar as lições
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  progress Progress[]
  notes    Note[]

  @@unique([moduleId, slug])
  @@index([moduleId])
}
